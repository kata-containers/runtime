// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// DeviceState The valid states for a Device. So far, a device can only be in the Attached mode. Future valid values will be Detaching and Detached.
// swagger:model DeviceState
type DeviceState string

const (

	// DeviceStateAttached captures enum value "Attached"
	DeviceStateAttached DeviceState = "Attached"
)

// for schema
var deviceStateEnum []interface{}

func init() {
	var res []DeviceState
	if err := json.Unmarshal([]byte(`["Attached"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		deviceStateEnum = append(deviceStateEnum, v)
	}
}

func (m DeviceState) validateDeviceStateEnum(path, location string, value DeviceState) error {
	if err := validate.Enum(path, location, value, deviceStateEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this device state
func (m DeviceState) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateDeviceStateEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
